<?php

namespace AppBundle\Repository;
use AppBundle\Repository\TranslatableRepository;

/**
 * TagRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class EntityRepository extends  TranslatableRepository
{

	/**
	 * HOTELS
	 */
	public function findAllHotels($em,$request,$data = array()) {
		$domain_id = $request->getSession()->get('domain');

		$hotels = $em->createQueryBuilder()
			->select('h')
			->from('AppBundle\Entity\Hotel', 'h')
			->innerJoin('h.type_domain','td')
			->innerJoin('h.translations','tr','WITH','tr.locale = :locale')
			->where('td.id = :domain')
			->andWhere('tr.active = :active')
			->setParameters( array(
				'domain' => $domain_id,
				'active' => 1,
				'locale'=> $request->getLocale(),
			));
		if (!empty($data['filtered_destinations'])) {
			$hotels = $hotels->innerJoin('h.destination','d')
				->andWhere('d.id IN (:destination)')
				->setParameter('destination',$data['filtered_destinations']);
		}
		if (!empty($data['filtered_stars'])) {
			$hotels = $hotels->innerJoin('h.hotel_stars','hs')
				->andWhere('hs.id IN (:hotel_stars)')
				->setParameter('hotel_stars',$data['filtered_stars']);
		}


		$hotels = $hotels
			->orderBy('h.id','desc')
			->getQuery()
			->getResult();

		return $hotels;
	}

	public function findOneHotelBySlug ($em,$request,$slug) {

		$domain_id = $request->getSession()->get('domain');

		$hotel = $em->createQueryBuilder()
			->select('h')
			->from('AppBundle\Entity\Hotel', 'h')
			->innerJoin('h.type_domain','td')
			->innerJoin('h.translations','tr','WITH','tr.locale = :locale')
			->where('tr.slug = :slug')
			->andWhere('td.id = :domain')
			->andWhere('tr.active = :active')
			->setParameters( array(
				'domain' => $domain_id,
				'active' => 1,
				'locale'=> $request->getLocale(),
				'slug' => trim($slug)
			))
			->setMaxResults(1)
			->getQuery()
			->getOneOrNullResult();


		return $hotel;

	}

	/**
	 * EXTENSIONS
	 */
	public function findAllExtensions($em,$request,$data = array()) {
		$domain_id = $request->getSession()->get('domain');

		$extensions = $em->createQueryBuilder()
			->select('h')
			->from('AppBundle\Entity\Extension', 'h')
			->innerJoin('h.type_domain','td')
			->innerJoin('h.translations','tr','WITH','tr.locale = :locale')
			->where('td.id = :domain')
			->andWhere('tr.active = :active')
			->setParameters( array(
				'domain' => $domain_id,
				'active' => 1,
				'locale'=> $request->getLocale(),
			));

		if (!empty($data['filtered_destinations'])) {
			$extensions = $extensions->innerJoin('h.related_content','rc')
				->andWhere('rc.id IN (:related)')
				->setParameter('related',$data['filtered_destinations']);
		}
		if (!empty($data['filtered_categories'])) {
			$extensions = $extensions->andWhere('h.mini_groupe IN (:mini_groupe)')
				->setParameter('mini_groupe',array_keys($data['filtered_categories']));
		}
		if (!empty($data['filtered_recreations'])) {
			$extensions = $extensions->innerJoin('h.extension_recreation','er')
				->andWhere('er.id IN (:recreations)')
				->setParameter('recreations',$data['filtered_recreations']);
		}
		if (!empty($data['filtered_seasons'])) {
			$extensions = $extensions->innerJoin('h.season','s')
				->andWhere('s.id IN (:season)')
				->setParameter('season',$data['filtered_seasons']);
		}
		if (!empty($data['filtered_days'])) {
			$extensions = $extensions->andWhere('h.amount_days IN (:amount_days)')
				->setParameter('amount_days',array_keys($data['filtered_days']));
		}
		if (!empty($data['filtered_destinations_from'])) {
			$extensions = $extensions->innerJoin('h.starting_point','sp')
				->andWhere('sp.id IN (:from)')
				->setParameter('from',$data['filtered_destinations_from']);
		}

		$extensions = $extensions
			->orderBy('h.id','desc')
			->getQuery()
			->getResult();

		return $extensions;
	}

	public function findOneExtensionBySlug ($em,$request,$slug) {

		$domain_id = $request->getSession()->get('domain');

		$hotel = $em->createQueryBuilder()
			->select('h')
			->from('AppBundle\Entity\Extension', 'h')
			->innerJoin('h.type_domain','td')
			->innerJoin('h.translations','tr','WITH','tr.locale = :locale')
			->where('tr.slug = :slug')
			->andWhere('td.id = :domain')
			->andWhere('tr.active = :active')
			->setParameters( array(
				'domain' => $domain_id,
				'active' => 1,
				'locale'=> $request->getLocale(),
				'slug' => trim($slug)
			))
			->setMaxResults(1)
			->getQuery()
			->getOneOrNullResult();


		return $hotel;

	}

	/**
	 * VOYAGE
	 */
	public function findAllVoyages($em,$request,$data = array()) {
		$domain_id = $request->getSession()->get('domain');

		$extensions = $em->createQueryBuilder()
			->select('h')
			->from('AppBundle\Entity\Voyage', 'h')
			->innerJoin('h.type_domain','td')
			->innerJoin('h.translations','tr','WITH','tr.locale = :locale')
			->where('td.id = :domain')
			->andWhere('tr.active = :active')
			->setParameters( array(
				'domain' => $domain_id,
				'active' => 1,
				'locale'=> $request->getLocale(),
			));

		if (!empty($data['filtered_destinations'])) {
			$extensions = $extensions->innerJoin('h.related_content','rc')
				->andWhere('rc.id IN (:related)')
				->setParameter('related',$data['filtered_destinations']);
		}
		if (!empty($data['filtered_categories'])) {
			$extensions = $extensions->andWhere('h.mini_groupe IN (:mini_groupe)')
				->setParameter('mini_groupe',array_keys($data['filtered_categories']));
		}
		if (!empty($data['filtered_recreations'])) {
			$extensions = $extensions->innerJoin('h.voyage_recreation','er')
				->andWhere('er.id IN (:recreations)')
				->setParameter('recreations',$data['filtered_recreations']);
		}
		if (!empty($data['filtered_voyage_types'])) {
			$extensions = $extensions->innerJoin('h.type_voyage','tv')
				->andWhere('tv.id IN (:types)')
				->setParameter('types',$data['filtered_voyage_types']);
		}
		if (!empty($data['filtered_seasons'])) {
			$extensions = $extensions->innerJoin('h.season','s')
				->andWhere('s.id IN (:season)')
				->setParameter('season',$data['filtered_seasons']);
		}
		if (!empty($data['filtered_days'])) {
			$extensions = $extensions->andWhere('h.amount_days IN (:amount_days)')
				->setParameter('amount_days',array_keys($data['filtered_days']));
		}
		if (!empty($data['filtered_destinations_from'])) {
			$extensions = $extensions->innerJoin('h.starting_point','sp')
				->andWhere('sp.id IN (:from)')
				->setParameter('from',$data['filtered_destinations_from']);
		}

		$extensions = $extensions
			->orderBy('h.id','desc')
			->getQuery()
			->getResult();

		return $extensions;
	}

	public function findAllVoyagesOnFrontPage($em,$request) {
		$domain_id = $request->getSession()->get('domain');

		$extensions = $em->createQueryBuilder()
			->select('h')
			->from('AppBundle\Entity\Voyage', 'h')
			->innerJoin('h.type_domain','td')
			->innerJoin('h.translations','tr','WITH','tr.locale = :locale')
			//->where('td.id = :domain')
			->andWhere('tr.active = :active')
			->andWhere('h.favorite = :favorite')
			//->andWhere('h.promoted_fronpage = :promoted_fronpage')
			->setParameters( array(
				//'domain' => $domain_id,
				'active' => 1,
				'favorite' => 1,
				'locale'=> $request->getLocale(),
				//'promoted_fronpage'=> 1,
			));
		$extensions = $extensions
			->orderBy('h.id','desc')
			->getQuery()
			->getResult();

		return $extensions;
	}

	public function findAllVoyagesOnFrontMinigroup($em,$request) {
		$domain_id = $request->getSession()->get('domain');

		$extensions = $em->createQueryBuilder()
			->select('h')
			->from('AppBundle\Entity\Voyage', 'h')
			->innerJoin('h.type_domain','td')
			->innerJoin('h.translations','tr','WITH','tr.locale = :locale')
			->where('td.id = :domain')
			->andWhere('tr.active = :active')
			->andWhere('h.promoted_fronpage = :promoted_fronpage')
			->andWhere('h.mini_groupe = :mini_groupe')
			->setParameters( array(
				'domain' => $domain_id,
				'active' => 1,
				'locale'=> $request->getLocale(),
				'promoted_fronpage'=> 1,
				'mini_groupe'=> 1,
			));
		$extensions = $extensions
			->orderBy('h.minigroup_promotion_weight','asc')
			->getQuery()
			->getResult();

		return $extensions;
	}

	public function findOneVoyageBySlug ($em,$request,$slug) {

		$domain_id = $request->getSession()->get('domain');

		$voyage = $em->createQueryBuilder()
			->select('h')
			->from('AppBundle\Entity\Voyage', 'h')
			->innerJoin('h.type_domain','td')
			->innerJoin('h.translations','tr','WITH','tr.locale = :locale')
			->where('tr.slug = :slug')
			->andWhere('td.id = :domain')
			->andWhere('tr.active = :active')
			->setParameters( array(
				'domain' => $domain_id,
				'active' => 1,
				'locale'=> $request->getLocale(),
				'slug' => trim($slug)
			))
			->setMaxResults(1)
			->getQuery()
			->getOneOrNullResult();


		return $voyage;

	}

	/**
	 * VISITS
	 */
	public function findAllVisits($em,$request,$data = array()) {
		$domain_id = $request->getSession()->get('domain');

		$extensions = $em->createQueryBuilder()
			->select('h')
			->from('AppBundle\Entity\Visit', 'h')
			->innerJoin('h.type_domain','td')
			->innerJoin('h.translations','tr','WITH','tr.locale = :locale')
			->where('td.id = :domain')
			->andWhere('tr.active = :active')
			->setParameters( array(
				'domain' => $domain_id,
				'active' => 1,
				'locale'=> $request->getLocale(),
			));

		if (!empty($data['filtered_destinations'])) {
			$extensions = $extensions->innerJoin('h.travel_points','rc')
				->andWhere('rc.id IN (:points)')
				->setParameter('points',$data['filtered_destinations']);
		}
		if (!empty($data['filtered_visit_types'])) {
			$extensions = $extensions->innerJoin('h.visit_duration','tv')
				->andWhere('tv.id IN (:duration)')
				->setParameter('duration',$data['filtered_visit_types']);
		}
		if (!empty($data['filtered_seasons'])) {
			$extensions = $extensions->innerJoin('h.season','s')
				->andWhere('s.id IN (:season)')
				->setParameter('season',$data['filtered_seasons']);
		}
		if (!empty($data['filtered_hours'])) {
			$extensions = $extensions->andWhere('h.number_hours_visit IN (:hours)')
				->setParameter('hours',array_keys($data['filtered_hours']));
		}

		$extensions = $extensions
			->orderBy('h.id','desc')
			->getQuery()
			->getResult();

		return $extensions;
	}

	public function findOneVisitBySlug ($em,$request,$slug) {

		$domain_id = $request->getSession()->get('domain');

		$voyage = $em->createQueryBuilder()
			->select('h')
			->from('AppBundle\Entity\Visit', 'h')
			->innerJoin('h.type_domain','td')
			->innerJoin('h.translations','tr','WITH','tr.locale = :locale')
			->where('tr.slug = :slug')
			->andWhere('td.id = :domain')
			->andWhere('tr.active = :active')
			->setParameters( array(
				'domain' => $domain_id,
				'active' => 1,
				'locale'=> $request->getLocale(),
				'slug' => trim($slug)
			))
			->setMaxResults(1)
			->getQuery()
			->getOneOrNullResult();


		return $voyage;

	}

	/**
	 * EVENTS
	 */
	public function findAllEvents($em,$request,$data = array()) {
		$extensions = $em->createQueryBuilder()
			->select('h')
			->from('AppBundle\Entity\Event', 'h')
			->innerJoin('h.translations','tr','WITH','tr.locale = :locale')
			->innerJoin('h.event_type','et')
			->innerJoin('h.event_schedule', 'es')
			->where('tr.active = :active')
			->setParameters( array(
				'active' => 1,
				'locale'=> $request->getLocale(),
			));

		if (!empty($data['filtered_services'])) {
			$extensions = $extensions->andWhere('et.id IN (:event_type)')
				->setParameter('event_type',$data['filtered_services']);
		}

		$orWhere = array();
		if (!empty($data['filtered_dates'])) {
			foreach ($data['filtered_dates'] as $key=>$value) {
				$date = preg_replace('/\D/', '', $key);
				$start_date = $date.'0000';
				$end_date = $date.'2400';
				$orWhere[] = '(es.date_start >= '.$start_date.' AND es.date_stop <= '.$end_date.')';
			}
			//$extensions = $extensions->andWhere(implode (' OR ', $orWhere));
		}

		if (!empty($data['filtered_months'])) {
			foreach ($data['filtered_months'] as $key=>$value) {
				$date = preg_replace('/\D/', '', $key);
				$start_date = $date.'000000';
				$end_date = $date.'320000';
				$orWhere[] = '(es.date_start >= '.$start_date.' AND es.date_stop <= '.$end_date.')';
			}
		} else {
			$start_date = date('Y').date('m').date('d').'0000';
			$extensions = $extensions
				->andWhere('es.date_start >= :date_start')
				->setParameter('date_start',$start_date);
		}

		if (!empty($orWhere)) {
			$extensions = $extensions->andWhere(implode (' OR ', $orWhere));
		}


		$extensions = $extensions
			->orderBy('es.date_start','asc')
			->getQuery()
			->getResult();

		return $extensions;
	}

	public function findOneEventBySlug ($em,$request,$slug) {


		$voyage = $em->createQueryBuilder()
			->select('h')
			->from('AppBundle\Entity\Event', 'h')
			->innerJoin('h.translations','tr','WITH','tr.locale = :locale')
			->where('tr.slug = :slug')
			->andWhere('tr.active = :active')
			->setParameters( array(
				'active' => 1,
				'locale'=> $request->getLocale(),
				'slug' => trim($slug)
			))
			->setMaxResults(1)
			->getQuery()
			->getOneOrNullResult();


		return $voyage;

	}

	/**
	 * DESTINATIONS
	 */

	public function findAllDestinations($em,$request){
		$domain_id = $request->getSession()->get('domain');
		$destinations = $em->createQueryBuilder()
			->select('h')
			->from('AppBundle\Entity\Destination', 'h')
			->innerJoin('h.type_domain','td')
			->where('td.id = :domain')
			->andWhere('h.master_destination = :master_destination')
			->andWhere('h.present_in_list = :present_in_list')
			->setParameters( array(
				'domain' => $domain_id,
				'master_destination' => 1,
				'present_in_list'=> 1
			))->orderBy('h.id','asc')
			->getQuery()
			->getResult();

		return $destinations;
	}

	public function findOneDestinationBySlug ($em,$request,$slug) {

		$domain_id = $request->getSession()->get('domain');

		$hotel = $em->createQueryBuilder()
			->select('h')
			->from('AppBundle\Entity\Destination', 'h')
			->innerJoin('h.type_domain','td')
			->innerJoin('h.translations','tr','WITH','tr.locale = :locale')
			->where('tr.slug = :slug')
			->andWhere('td.id = :domain')
			->setParameters( array(
				'domain' => $domain_id,
				'locale'=> $request->getLocale(),
				'slug' => trim($slug)
			))
			->setMaxResults(1)
			->getQuery()
			->getOneOrNullResult();


		return $hotel;

	}

	public function findDestinationExtensions($em,$request,$destination) {
		$result = array();

		$domain_id = $request->getSession()->get('domain');
		$extensions = $em->createQueryBuilder()
			->select('h')
			->from('AppBundle\Entity\Extension', 'h')
			->innerJoin('h.type_domain','td')
			->innerJoin('h.translations','tr','WITH','tr.locale = :locale')
			->innerJoin('h.extension','e')
			->innerJoin('e.destination','d')
			->where('td.id = :domain')
			->andWhere('tr.active = :active')
			->andWhere('h.starting_point = :starting_point OR d.id = :destination ')
			->setParameters( array(
				'domain' => $domain_id,
				'active' => 1,
				'locale'=> $request->getLocale(),
				'starting_point'=> $destination->getId(),
				'destination'=> $destination->getId()
			))->orderBy('h.id','desc')
			->getQuery()
			->getResult();

		$voyages = $em->createQueryBuilder()
			->select('h')
			->from('AppBundle\Entity\Voyage', 'h')
			->innerJoin('h.type_domain','td')
			->innerJoin('h.translations','tr','WITH','tr.locale = :locale')
			->innerJoin('h.voyage','e')
			->innerJoin('e.destination','d')
			->where('td.id = :domain')
			->andWhere('tr.active = :active')
			->andWhere('h.starting_point = :starting_point OR d.id = :destination ')
			->setParameters( array(
				'domain' => $domain_id,
				'active' => 1,
				'locale'=> $request->getLocale(),
				'starting_point'=> $destination->getId(),
				'destination'=> $destination->getId()
			))->orderBy('h.id','desc')
			->getQuery()
			->getResult();


		$visits = $em->createQueryBuilder()
			->select('h')
			->from('AppBundle\Entity\Visit', 'h')
			->innerJoin('h.type_domain','td')
			->innerJoin('h.translations','tr','WITH','tr.locale = :locale')
			->innerJoin('h.travel_points','tp')
			->where('td.id = :domain')
			->andWhere('tr.active = :active')
			->andWhere('tp.id = :destination ')
			->setParameters( array(
				'domain' => $domain_id,
				'active' => 1,
				'locale'=> $request->getLocale(),
				'destination'=> $destination->getId()
			))->orderBy('h.id','desc')
			->getQuery()
			->getResult();

		$result = array_merge($extensions,$voyages,$visits);
		shuffle($result);
		$result = array_slice($result, 0, 20);
		return $result;
	}

	public function findDestinationEvents($em,$request,$destination) {
		$start_date = date('Y').date('m').date('d').'0000';
		$result = array();
		$events = $em->createQueryBuilder()
			->select('h')
			->from('AppBundle\Entity\Event', 'h')
			->innerJoin('h.event_schedule', 'es')
			->innerJoin('h.translations','tr','WITH','tr.locale = :locale')
			->innerJoin('h.destination','d')
			->where('tr.active = :active')
			->andWhere('d.id = :destination')
			->andWhere('es.date_start > :date_start')
			->setParameters( array(
				'active' => 1,
				'locale'=> $request->getLocale(),
				'destination'=> $destination->getId(),
				'date_start'=>$start_date
			))->orderBy('h.id','desc')
			->getQuery()
			->getResult();

		shuffle($events);
		$result = array_slice($events, 0, 20);
		return $result;
	}


	/**
	 * STATIC ARTICLE
	 */
	public function findOneStaticArticle($em,$request,$slug) {
		$domain_id = $request->getSession()->get('domain');

		$article = $em->createQueryBuilder()
			->select('a')
			->from('AppBundle\Entity\Article', 'a')
			->innerJoin('a.type_domain','td')
			->innerJoin('a.translations','tr','WITH','tr.locale = :locale')
			->where('tr.slug = :slug')
			->andWhere('td.id = :domain')
			->andWhere('tr.active = :active')
			->setParameters( array(
				'domain' => $domain_id,
				'active' => 1,
				'locale'=> $request->getLocale(),
				'slug' => trim($slug)
			))
			->setMaxResults(1)
			->getQuery()
			->getOneOrNullResult();

		return $article;
	}



	public function findAllForAdminList($em,$entity = '',$request) {
		$list = $em->createQueryBuilder()
			->select('u')
			->from($entity, 'u')
			->where('u.id > :id')
			->setParameter('id',0);
		$entityObject = new $entity();

		if (method_exists($entityObject,'translate')) {
			$list = $list->leftJoin('u.translations','tr');
		}

		$order = $request->query->get('order','');
		if ($order) {
			$order = explode('|',$order);
			if (method_exists($entityObject,'translate') && method_exists($entityObject->translate(),$this->getMethodName($order[0]))) {
				$list = $list->orderBy('tr.'.$order[0],$order[1]);
			} else {
				$list = $list->orderBy('u.'.$order[0],$order[1]);
			}
		} else {
			$list = $list->orderBy('u.id','desc');
		}

		$search = strtolower(trim($request->query->get('search','')));
		if (!empty($search)) {
			$orWhere = array();
			//$searchFields = array('name','body','body_summary','value','slug','email','description');
			$searchFields = array('name','email');
			foreach($searchFields as $sf) {
				if (method_exists($entityObject,'translate') && method_exists($entityObject->translate(),$this->getMethodName($sf)))		{
					$orWhere[] = "(tr.".$sf." LIKE '%".$search."%')";
				} else if (method_exists($entityObject,$this->getMethodName($sf))) {
					$orWhere[] = "(u.".$sf." LIKE '%".$search."%')";
				}
			}
			if (!empty($orWhere)) {
				$list = $list->andWhere(implode (' OR ', $orWhere));
			}
		}

		$active = $request->query->get('active_lang','');
		if (!empty($active)) {
			$orWhere = array();
			foreach($active as $l) {
				if (method_exists($entityObject,'translate') && method_exists($entityObject->translate(),$this->getMethodName('active','is')))		{
					$orWhere[] = "(tr.locale = '".$l."' AND tr.active = 1)";
				}
			}

			if (!empty($orWhere)) {
				$list = $list->andWhere(implode (' OR ', $orWhere));
			}
		}

		$list = $list->distinct();

		/*$list = $list->getQuery()
			->getSQL();
		echo '<pre>';
		print_r($list );
		echo '</pre>';
		die();*/

		$list = $list->getQuery()
			->getResult();

		return $list;
	}

	private function getMethodName ($name,$prefix = 'get'){
		$name = ucwords(str_replace('_',' ',$name));
		$name = str_replace(' ','',$name);
		return $prefix.$name;
	}
}
